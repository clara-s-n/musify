@startuml blue-green-deployment
!theme plain
title Blue/Green Deployment - Diagrama de Despliegue

node "Docker Host" {
  
  node "NGINX Load Balancer" as NGINX {
    artifact "nginx.conf" as NginxConf
    
    note right of NginxConf
      upstream backend {
        server backend-app-1:8443 max_fails=3 fail_timeout=10s;
        server backend-app-2:8443 max_fails=3 fail_timeout=10s;
      }
      
      Health checks:
      - Passive monitoring
      - max_fails=3
      - fail_timeout=10s
      - Auto-exclude unhealthy
    end note
  }
  
  node "Backend Replica 1\n(backend-app-1)" as Backend1 <<Green>> {
    artifact "Spring Boot\nApplication v1.0" as App1
    artifact "Port 8443" as Port1
    
    note right of App1
      Estado: ACTIVO
      - Responde requests
      - Health: UP
      - Version: v1.0
    end note
  }
  
  node "Backend Replica 2\n(backend-app-2)" as Backend2 <<Blue>> {
    artifact "Spring Boot\nApplication v1.0" as App2
    artifact "Port 8443" as Port2
    
    note right of App2
      Estado: ACTIVO
      - Responde requests
      - Health: UP
      - Version: v1.0
    end note
  }
  
  node "Shared Database" as DBNode {
    database "PostgreSQL" as DB
    
    note right of DB
      Compartida por ambas réplicas
      - Host: postgres:5432
      - Database: musify
      - Migración: Manual SQL scripts
    end note
  }
  
  cloud "External Services" {
    node "Flaky Service" as FlakyService
    node "Spotify API" as SpotifyAPI
  }
}

actor "Users" as Users

Users --> NGINX: HTTPS\nRequests

NGINX -down-> Backend1: Load balance\n50% traffic
NGINX -down-> Backend2: Load balance\n50% traffic

Backend1 --> DB: JDBC\nConnection pool
Backend2 --> DB: JDBC\nConnection pool

Backend1 --> FlakyService: HTTP
Backend2 --> FlakyService: HTTP

Backend1 --> SpotifyAPI: HTTPS\nOAuth2
Backend2 --> SpotifyAPI: HTTPS\nOAuth2

note bottom of NGINX
  **Distribución de tráfico:**
  - Round-robin por defecto
  - keepalive=32 (connection pooling)
  - proxy_next_upstream en errores
  - Retries automáticos si replica falla
end note

note bottom of Backend1
  **Réplica 1 (Green):**
  - Container: backend-app-1
  - Image: musify-backend:latest
  - Replicas: 1
  - Restart: always
end note

note bottom of Backend2
  **Réplica 2 (Blue):**
  - Container: backend-app-2
  - Image: musify-backend:latest
  - Replicas: 1
  - Restart: always
end note

package "Deployment Configuration" {
  note as DeployNote
    **docker-compose.yaml:**
    
    services:
      backend-app-1:
        image: musify-backend:latest
        container_name: backend-app-1
        networks:
          - musify-network
        depends_on:
          - postgres
        restart: always
      
      backend-app-2:
        image: musify-backend:latest
        container_name: backend-app-2
        networks:
          - musify-network
        depends_on:
          - postgres
        restart: always
      
      nginx:
        image: nginx:alpine
        ports:
          - "443:443"
        volumes:
          - ./frontend/MusifyFront/ops/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
          - backend-app-1
          - backend-app-2
  end note
}

@enduml
