@startuml async-components
!theme plain
title Asynchronous Request-Reply - Diagrama de Componentes

package "Spring Boot Application" {
  
  component "BackendApplication" as App {
  }
  note right of App
    @EnableAsync
    @EnableScheduling
  end note
  
  component "AsyncConfig" as Config {
    + taskExecutor(): Executor
  }
  
  component "ThreadPoolTaskExecutor" as Executor {
    corePoolSize: 5
    maxPoolSize: 10
    queueCapacity: 100
    threadNamePrefix: "async-"
  }
  
  package "Controllers" {
    component "PlaybackController" as Controller {
      + start(...): CompletableFuture<ResponseEntity>
      + resume(...): CompletableFuture<ResponseEntity>
    }
  }
  
  package "Services" {
    component "PlaybackService" as Service {
      + startPlayback(...)
      + resumePlayback(...)
      + pausePlayback(...)
    }
  }
  
  component "StreamClient" as Client
  
}

cloud "External" {
  component "Flaky Service" as Flaky
}

actor "Usuario" as User

' Relaciones
App --> Config : configures
Config --> Executor : creates
Controller --> Executor : uses @Async
Controller ..> Service : calls asynchronously
Service --> Client : uses
Client --> Flaky : HTTP calls

User --> Controller : HTTP Request

note right of Controller
  **Método Asíncrono:**
  
  @PostMapping("/start")
  @TimeLimiter(name = "streamSource")
  public CompletableFuture<ResponseEntity<...>> start(...) {
      return CompletableFuture.supplyAsync(() -> {
          // Lógica asíncrona
          return playbackService.startPlayback(...);
      });
  }
  
  Retorna inmediatamente sin bloquear
  thread del servidor HTTP
end note

note right of Executor
  **Configuración Thread Pool:**
  
  - Core threads: 5
    (siempre activos)
  
  - Max threads: 10
    (pico de carga)
  
  - Queue: 100
    (buffer de tareas)
  
  - Reject policy: 
    CallerRunsPolicy
    (backpressure)
end note

note bottom of Service
  **Beneficios:**
  
  ✓ No bloquea threads HTTP
  ✓ Mejor throughput
  ✓ Maneja picos de carga
  ✓ Timeout configurables
  ✓ Graceful degradation
end note

note right of Flaky
  Servicio inestable
  que puede tardar
  debido a timeouts
  y retries
end note

@enduml
