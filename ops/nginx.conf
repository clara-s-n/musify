# ops/nginx.conf
# Balancea tráfico entre backend-app-1 y backend-app-2 (definidos en docker-compose)
# y reintenta automáticamente ante errores/timeout.

events {}

http {
  # Log básico (opcional)
  access_log /var/log/nginx/access.log;
  error_log  /var/log/nginx/error.log warn;

  # Upstream con 2 réplicas (round-robin). max_fails/fail_timeout = health check pasivo.
  upstream app_backend {
    server backend-app-1:8080 max_fails=3 fail_timeout=10s;
    server backend-app-2:8080 max_fails=3 fail_timeout=10s;
    keepalive 32;
  }

  server {
    listen 80;

    # Reintentos hacia la siguiente réplica cuando hay error/timeout/5xx
    proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    proxy_next_upstream_tries 3;

    location / {
      proxy_pass http://app_backend;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # Timeouts razonables para no colgar el cliente
      proxy_connect_timeout 10s;
      proxy_send_timeout    10s;
      proxy_read_timeout    10s;
    }

    # (Opcional) gzip para JSON/text
    gzip on;
    gzip_types application/json application/javascript text/plain text/css;
  }
}
